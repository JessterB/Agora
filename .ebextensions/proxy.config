###################################################################################################
#### Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
####
#### Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file
#### except in compliance with the License. A copy of the License is located at
####
####     http://aws.amazon.com/apache2.0/
####
#### or in the "license" file accompanying this file. This file is distributed on an "AS IS"
#### BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#### License for the specific language governing permissions and limitations under the License.
###################################################################################################

###################################################################################################
#### This configuration file configures Nginx for Node.js environments to redirect HTTP
#### requests on port 80 to HTTPS on port 443 after you have configured your environment to support
#### HTTPS connections:
####
#### Configuring Your Elastic Beanstalk Environment's Load Balancer to Terminate HTTPS:
####  http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https-elb.html
####
#### Terminating HTTPS on EC2 Instances Running Node.js:
####  http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/https-singleinstance-nodejs.html
###################################################################################################
files:
  /etc/nginx/conf.d/proxy.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      upstream nodejs {
        server 127.0.0.1:8080;
        keepalive 256;
      }

      # Cache for static files
      proxy_cache_path /tmp/nginx-cache levels=1:2 keys_zone=staticcache:8m max_size=100m inactive=60m use_temp_path=off;
      # keyzone size 8MB, cache size 100MB, inactive delete 60min
      proxy_cache_key "$scheme$request_method$host$request_uri";
      proxy_cache_valid 200 302 60m; # cache successful responses for 60 minutes
      proxy_cache_valid 404 1m; # expire 404 responses 1 minute

      server {
        listen 80;

        if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
            set $year $1;
            set $month $2;
            set $day $3;
            set $hour $4;
        }
        access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;
        access_log  /var/log/nginx/access.log  main;

        location / {
            set $redirect 0;
            if ($http_x_forwarded_proto != "https") {
                set $redirect 1;
            }
            if ($http_user_agent ~* "ELB-HealthChecker") {
                set $redirect 0;
            }
            if ($redirect = 1) {
                return 301 https://$host$request_uri;
            }

            proxy_pass  http://nodejs;
            proxy_set_header   Connection "";
            proxy_http_version 1.1;
            proxy_set_header        Host            $host;
            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;

            # Tell the upstream servers that the request was proxied through NGINX, no specific use case but can be useful
            proxy_set_header   X-NginX-Proxy    true;

            # When one of the replicated server is down (e.g if the container is being updated with the latest version and coming back up soon)
            # NGINX will only wait for 2 seconds to connect to it, and if not successful, will move on to another one
            proxy_connect_timeout      2;
            proxy_buffer_size          8k;
            proxy_buffers              8 32k;
            proxy_busy_buffers_size    64k;
            proxy_temp_file_write_size 64k;

            # Sets a timeout for transmitting a request to the proxied server.
            # The timeout is set only between two successive write/read operations, not for the transmission of the whole request.
            proxy_send_timeout          600;
            proxy_read_timeout          600;
            send_timeout                600;
        }

        # Only cache static files; don't cache the dynamic API response!
        location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|bmp|js|html|htm|eot|woff|woff2|svg|ttf)$ {
            proxy_cache staticcache; # Use "staticcache" we defined above
            proxy_cache_bypass $http_cache_control; # Support client "Cache-Control: no-cache" directive
            add_header X-Proxy-Cache $upstream_cache_status; # Hit or Miss

            # Nginx cache to ignore Node.js default "Cache-Control: public, max-age=0"
            # and don't pass it on to clients
            proxy_ignore_headers Cache-Control;
            proxy_hide_header Cache-Control;
            expires 60m; # "Cache-Control: max-age=3600" tells client to cache for 60 minutes

            proxy_pass  http://nodejs;
        }

        gzip on;
        gzip_comp_level 6;
        gzip_types text/html text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

      }

  /opt/elasticbeanstalk/hooks/configdeploy/post/99_kill_default_nginx.sh:
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash -xe
      if [ -f /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf ]; then rm -f /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf; fi
      echo 'Stopping Nginx......'
      initctl stop nginx
      echo 'Starting Nginx...... '
      initctl start nginx

container_commands:
 removeconfig:
    command: "rm -f /tmp/deployment/config/#etc#nginx#conf.d#00_elastic_beanstalk_proxy.conf /etc/nginx/conf.d/00_elastic_beanstalk_proxy.conf"
